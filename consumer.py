from google.cloud import pubsub_v1
import time
from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json
from datetime import datetime
from uuid import UUID

# Initialize the Pub/Sub subscriber client
subscriber = pubsub_v1.SubscriberClient()

# Project and Subscription details
project_id = "your-project-id"  # Replace with your actual project ID
subscription_name = "your-subscription-name"  # Replace with your actual subscription name
subscription_path = subscriber.subscription_path(project_id, subscription_name)

# Cassandra config
cloud_config = {
    'secure_connect_bundle': 'your-secure-bundle.zip'
}

# This token JSON file is autogenerated when you download your token,
# if yours is different update the file name below
with open("your-token-file.json") as f:
    secrets = json.load(f)

CLIENT_ID = secrets["clientId"]
CLIENT_SECRET = secrets["secret"]

auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
session = cluster.connect()

try:
    query = "use ecommerce"
    session.execute(query)
    print("Inside the ecommerce keyspace")

except Exception as err:
    print("Exception: ", err)


# Transform data
def data_transform(orders_dict):
    # Apply Transformation
    timestamp_str = orders_dict['order_purchase_timestamp']
    # Convert the timestamp string to a datetime object
    timestamp_dt = datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')
    # Extract hour and day of the week as a string
    hour = timestamp_dt.hour
    day_of_week_str = timestamp_dt.strftime('%A')  # Full day name

    return hour, day_of_week_str

# Data insertion into Cassandra table
def data_insert(orders_dict, hour, day_of_week_str):
    try:
        insert_query = """
            INSERT INTO orders (
                order_id, customer_id, order_status, order_purchase_timestamp,
                order_approved_at, order_delivered_carrier_date,
                order_delivered_customer_date, order_estimated_delivery_date,
                OrderHour, OrderDayOfWeek
            )
             VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s);
        """
        session.execute(insert_query, (
            UUID(orders_dict['order_id']),
            UUID(orders_dict['customer_id']),
            orders_dict['order_status'],
            orders_dict['order_purchase_timestamp'],
            orders_dict['order_approved_at'],
            orders_dict['order_delivered_carrier_date'],
            orders_dict['order_delivered_customer_date'],
            orders_dict['order_estimated_delivery_date'],
            hour,
            day_of_week_str
        ))
    except Exception as e:
        print("Exception :", e)

# Pull and process messages
def pull_messages():
    while True:
        response = subscriber.pull(request={"subscription": subscription_path, "max_messages": 5})
        ack_ids = []

        for received_message in response.received_messages:
            # Extract JSON data
            json_data = received_message.message.data.decode('utf-8')

            # Deserialize the JSON data
            orders_dict = json.loads(json_data)
            print(orders_dict)

            hour, day_of_week_str = data_transform(orders_dict)
            data_insert(orders_dict, hour, day_of_week_str)
            print("Data insert successfully")

            # Collect ack ID for acknowledgment
            ack_ids.append(received_message.ack_id)
            time.sleep(1)

        # Acknowledge the messages so they won't be sent again
        if ack_ids:
            subscriber.acknowledge(request={"subscription": subscription_path, "ack_ids": ack_ids})

# Run the consumer
if __name__ == "__main__":
    try:
        pull_messages()
    except KeyboardInterrupt:
        print("stopped")
